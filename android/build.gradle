apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'spoon'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'com.github.ben-manes.versions'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "org.ligi.materialteatimer"
        minSdkVersion 10
        targetSdkVersion 25
        versionCode 13
        versionName "1.3"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        archivesBaseName = "MaterialTeaTimer-$versionName"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }


    flavorDimensions "fire", "store"

    productFlavors {

        withFirebase {
            dimension "fire"
        }

        noFirebase {
            dimension "fire"
        }

        forFDroid {
            dimension "store"
            buildConfigField 'String', 'STORE', '"fdroid"'
        }

        forAmazon {
            dimension "store"
            buildConfigField 'String', 'STORE', '"amazon"'
        }

        forPlay {
            dimension "store"
            buildConfigField 'String', 'STORE', '"play"'
        }
    }

    android.variantFilter { variant ->
        def fireBase = variant.getFlavors().get(0).name
        def store = variant.getFlavors().get(1).name

        variant.setIgnore((project.hasProperty("singleFlavor") && (store != 'forPlay') && (build != 'prod')) ||
                ((store == 'forAmazon' || store == 'forPlay') && fireBase == 'noFirebase') ||
                (store == 'forFDroid' && fireBase != 'noFirebase'))

    }


    packagingOptions {
        // needed for assertJ
        exclude 'asm-license.txt'
        exclude 'LICENSE'
        exclude 'NOTICE'

        // hack for instrumentation testing :-(
        exclude 'LICENSE.txt'

        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    lintOptions {
        warning 'MissingTranslation'
    }
}

dependencies {

    testCompile 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:design:$support_version"
    compile "com.android.support:recyclerview-v7:$support_version"
    compile "com.android.support:cardview-v7:$support_version"
    compile "com.android.support:percent:$support_version"

    compile "com.chibatching.kotpref:kotpref:$kotpref_version"
    compile "com.chibatching.kotpref:initializer:$kotpref_version"

    compile 'com.github.ligi:ExtraCompats:0.4'
    compile 'com.github.ligi:KAXT:0.17'

    withFirebaseCompile 'com.google.firebase:firebase-core:9.6.1'

    androidTestCompile "com.android.support:support-annotations:$support_version"
    androidTestCompile "com.android.support:appcompat-v7:$support_version"
    androidTestCompile "com.android.support:design:$support_version"

    androidTestCompile 'com.github.ligi:trulesk:0.19'
}

if (hasProperty("gms")) {
    apply plugin: 'com.google.gms.google-services'
}

android.applicationVariants.all { variant ->
    if (!variant.name.contains("oFirebase")) {
        project.tasks.each { t ->
            if (t.name.contains("GoogleServices")) {
                // Remove google services plugin
                variant.getVariantData().resourceGenTask.getTaskDependencies().values.remove(t);
            }
        }
    }
}

spoon {
    debug = true
    grantAllPermissions = true
}